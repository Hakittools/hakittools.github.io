# HakitTools – Full‑Stack Website (React + Tailwind + Express + Telegram Bot)

> Drop in your real logo file at `client/src/assets/logo.png`.
>
> **Ethical use only**: This codebase includes safeguards and copy emphasizing compliance and takedown support. Adjust language as needed.

---

## Project Structure
```
hakittools/
├─ server/
│  ├─ package.json
│  ├─ server.js
│  ├─ store.js
│  ├─ utils/
│  │  └─ telegram.js
│  └─ .env.example
└─ client/
   ├─ package.json
   ├─ index.html
   ├─ postcss.config.js
   ├─ tailwind.config.js
   ├─ src/
   │  ├─ main.jsx
   │  ├─ App.jsx
   │  ├─ data/tools.js
   │  ├─ assets/logo.png (replace with your file)
   │  ├─ components/
   │  │  ├─ NavBar.jsx
   │  │  ├─ Footer.jsx
   │  │  ├─ Hero.jsx
   │  │  ├─ HowItWorks.jsx
   │  │  ├─ ToolCard.jsx
   │  │  ├─ DownloadGate.jsx
   │  │  ├─ FAQBlock.jsx
   │  │  └─ ContactForm.jsx
   │  └─ pages/
   │     ├─ Home.jsx
   │     ├─ Tools.jsx
   │     ├─ FAQ.jsx
   │     └─ Contact.jsx
   └─ src/styles.css
```

---

## Quick Start

```bash
# 1) Backend
cd server
cp .env.example .env  # fill in values
npm i
npm run dev

# 2) Frontend (new terminal)
cd ../client
npm i
npm run dev
```

- Frontend dev server: `http://localhost:5173`
- Backend dev server (API): `http://localhost:4000`

> For production, deploy `client` as static build (Vercel/Netlify) and host `server` on a Node host (Render/Fly/Heroku), or use a single VM.

---

## server/.env.example
```
PORT=4000
CLIENT_ORIGIN=http://localhost:5173
DOWNLOAD_PASSWORD=ChangeThisPassword
TELEGRAM_BOT_TOKEN=123456:your-real-token
TELEGRAM_ADMIN_CHAT_ID=123456789  # your user/chat id that approves requests
JWT_SECRET=change_me
TOKEN_TTL_MINUTES=30
```

---

## server/package.json
```json
{
  "name": "hakittools-server",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "dev": "nodemon server.js",
    "start": "node server.js"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0"
  },
  "devDependencies": {
    "nodemon": "^3.1.0"
  }
}
```

---

## server/store.js (in‑memory store; swap with Redis/Postgres in prod)
```js
const tokens = new Map(); // token -> { toolId, createdAt, expiresAt, redeemed: bool }
export function saveToken(token, payload) { tokens.set(token, payload); }
export function getToken(token) { return tokens.get(token); }
export function redeemToken(token) {
  const t = tokens.get(token);
  if (!t) return false;
  t.redeemed = true; tokens.set(token, t); return true;
}
export function purgeExpired(now = new Date()) {
  for (const [k, v] of tokens) if (v.expiresAt < now) tokens.delete(k);
}
```

---

## server/utils/telegram.js
```js
import axios from 'axios';
import dotenv from 'dotenv';
dotenv.config();

const API = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}`;

export async function sendAdmin(text, buttons) {
  const payload = {
    chat_id: process.env.TELEGRAM_ADMIN_CHAT_ID,
    text,
    parse_mode: 'HTML'
  };
  if (buttons) payload.reply_markup = { inline_keyboard: [buttons] };
  return axios.post(`${API}/sendMessage`, payload);
}

export async function sendChat(chatId, text) {
  return axios.post(`${API}/sendMessage`, { chat_id: chatId, text, parse_mode: 'HTML' });
}
```

---

## server/server.js
```js
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import jwt from 'jsonwebtoken';
import dotenv from 'dotenv';
import crypto from 'crypto';
import { saveToken, getToken, redeemToken, purgeExpired } from './store.js';
import { sendAdmin } from './utils/telegram.js';

dotenv.config();
const app = express();
app.use(express.json());
app.use(helmet());
app.use(morgan('dev'));
app.use(cors({ origin: process.env.CLIENT_ORIGIN, credentials: true }));

const tools = [
  { id: 'decompiler-pro', name: 'Decompiler Pro', price: 149, desc: 'Ethical binary & APK decompilation with reports.' },
  { id: 'process-monitor', name: 'Process Monitor+', price: 59, desc: 'Real-time process and network monitoring.' },
  { id: 'takedown-suite', name: 'Takedown Suite', price: 199, desc: 'Evidence pack & provider-ready takedown requests.' },
  { id: 'account-recovery', name: 'Account Recovery Kit', price: 79, desc: 'Guided recovery workflows & templates.' },
  { id: 'data-analyzer', name: 'Data Analyzer', price: 129, desc: 'CSV/JSON analytics & anomaly detection.' },
  { id: 'log-diff', name: 'LogDiff Pro', price: 39, desc: 'Diff, filter & timeline security logs.' },
  { id: 'hash-inspector', name: 'Hash Inspector', price: 25, desc: 'Multi-hash & file signature checker.' },
  { id: 'ip-reputation', name: 'IP Reputation Check', price: 29, desc: 'Quick threat intel lookups.' },
  { id: 'meta-extractor', name: 'Meta Extractor', price: 19, desc: 'EXIF/document metadata scrape.' },
  { id: 'packet-view', name: 'PacketView Lite', price: 49, desc: 'PCAP parsing & summaries.' },
  { id: 'site-monitor', name: 'Site Uptime Monitor', price: 39, desc: 'Checks, alerts, simple SLA logs.' },
  { id: 'vault-audit', name: 'Vault Audit', price: 89, desc: 'Permission audit for cloud drives.' },
  { id: 'mal-scan', name: 'MalScan Helper', price: 59, desc: 'YARA-based helper ruleset & triage.' },
  { id: 'pw-check', name: 'Password Hygiene Check', price: 15, desc: 'Breach exposure & strength tips.' },
  { id: 'domain-trace', name: 'Domain Trace', price: 29, desc: 'WHOIS, DNS, history snapshot.' },
  { id: 'api-tester', name: 'API Tester', price: 45, desc: 'REST/GraphQL testing UI.' },
  { id: 'pdf-toolkit', name: 'PDF Toolkit', price: 19, desc: 'Merge, split, sign helper.' },
  { id: 'img-cleaner', name: 'Image Cleaner', price: 29, desc: 'Simple redaction & blur.' },
  { id: 'timeline-maker', name: 'Timeline Maker', price: 35, desc: 'Build incident timelines.' },
  { id: 'osint-bundle', name: 'OSINT Bundle', price: 149, desc: 'Curated OSINT workflows.' },
  { id: 'otp-recover', name: 'OTP Recovery Aid', price: 35, desc: 'Best-practice guidance & templates.' }
];

// --- PUBLIC ROUTES ---
app.get('/api/tools', (req, res) => res.json({ tools }));

// request a download token -> not issued immediately; sends a Telegram to admin
app.post('/api/request', async (req, res) => {
  try {
    const { toolId, buyer } = req.body; // buyer: { name, email, telegram }
    const tool = tools.find(t => t.id === toolId);
    if (!tool) return res.status(404).json({ error: 'Tool not found' });

    const requestId = crypto.randomBytes(6).toString('hex');
    const approveToken = crypto.randomBytes(16).toString('hex');
    const ttl = Number(process.env.TOKEN_TTL_MINUTES || 30);
    const expiresAt = new Date(Date.now() + ttl * 60 * 1000);

    saveToken(approveToken, { toolId, createdAt: new Date(), expiresAt, redeemed: false });

    // Notify admin on Telegram with inline approve button
    const msg = [
      `<b>New download request</b>`,
      `Tool: ${tool.name} ($${tool.price})`,
      `Buyer: ${buyer?.name || 'N/A'} | ${buyer?.email || 'N/A'} | @${buyer?.telegram || 'N/A'}`,
      `RequestId: ${requestId}`,
      `Approve token (auto): ${approveToken}`
    ].join('\n');

    await sendAdmin(msg, [
      { text: `Approve ${tool.name}`, url: `${process.env.CLIENT_ORIGIN}/?token=${approveToken}` }
    ]);

    return res.json({ ok: true, requestId, message: 'Request sent via Telegram. You will receive confirmation shortly.' });
  } catch (e) {
    console.error(e);
    res.status(500).json({ error: 'Failed to create request' });
  }
});

// exchange approve token for a short JWT session allowing download
app.post('/api/confirm', (req, res) => {
  purgeExpired();
  const { token } = req.body;
  const rec = getToken(token);
  if (!rec) return res.status(400).json({ error: 'Invalid or expired token' });
  if (rec.redeemed) return res.status(400).json({ error: 'Token already used' });
  redeemToken(token);
  const jwtToken = jwt.sign({ toolId: rec.toolId }, process.env.JWT_SECRET, { expiresIn: '30m' });
  return res.json({ ok: true, jwt: jwtToken });
});

// password gate for download page (optional secondary check)
app.post('/api/login-downloads', (req, res) => {
  const { password } = req.body;
  if (password === process.env.DOWNLOAD_PASSWORD) return res.json({ ok: true });
  res.status(401).json({ error: 'Unauthorized' });
});

// protected file URL issuance (dummy url here)
app.get('/api/download/:toolId', (req, res) => {
  const { authorization } = req.headers; // Bearer <jwt>
  if (!authorization) return res.status(401).json({ error: 'Missing auth' });
  const [, token] = authorization.split(' ');
  try {
    const payload = jwt.verify(token, process.env.JWT_SECRET);
    if (payload.toolId !== req.params.toolId) return res.status(403).json({ error: 'Wrong tool for token' });
    // In production, sign a pre-signed URL or stream the file.
    return res.json({ ok: true, url: `https://your-storage.example/downloads/${payload.toolId}.zip` });
  } catch (e) {
    return res.status(401).json({ error: 'Invalid or expired session' });
  }
});

app.get('/health', (_, res) => res.json({ ok: true }));

const port = process.env.PORT || 4000;
app.listen(port, () => console.log(`API listening on :${port}`));
```

---

## client/package.json
```json
{
  "name": "hakittools-client",
  "version": "1.0.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "framer-motion": "^11.0.0",
    "lucide-react": "^0.424.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-router-dom": "^6.26.1"
  },
  "devDependencies": {
    "@vitejs/plugin-react": "^4.3.1",
    "autoprefixer": "^10.4.19",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.7",
    "vite": "^5.3.4"
  }
}
```

---

## client/tailwind.config.js
```js
/** @type {import('tailwindcss').Config} */
export default {
  content: ["./index.html", "./src/**/*.{js,jsx}"],
  theme: {
    extend: {
      colors: {
        brand: {
          900: '#0b1736',
          800: '#0f214f',
          700: '#13306e',
          600: '#1a3f8b'
        }
      }
    }
  },
  plugins: []
};
```

---

## client/postcss.config.js
```js
export default { plugins: { tailwindcss: {}, autoprefixer: {} } };
```

---

## client/index.html
```html
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>HakitTools – Secure Ethical Tools</title>
  </head>
  <body class="bg-brand-900 text-white">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
```

---

## client/src/styles.css
```css
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body, #root { height: 100%; }
```

---

## client/src/main.jsx
```jsx
import React from 'react'
import { createRoot } from 'react-dom/client'
import { BrowserRouter } from 'react-router-dom'
import App from './App'
import './styles.css'

createRoot(document.getElementById('root')).render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
)
```

---

## client/src/App.jsx
```jsx
import React from 'react'
import { Routes, Route, useLocation } from 'react-router-dom'
import Home from './pages/Home'
import Tools from './pages/Tools'
import FAQ from './pages/FAQ'
import Contact from './pages/Contact'
import NavBar from './components/NavBar'
import Footer from './components/Footer'

export default function App(){
  const location = useLocation();
  return (
    <div className="min-h-screen flex flex-col bg-brand-900 text-white">
      <NavBar />
      <main className="flex-1">
        <Routes location={location}>
          <Route path="/" element={<Home />} />
          <Route path="/tools" element={<Tools />} />
          <Route path="/faq" element={<FAQ />} />
          <Route path="/contact" element={<Contact />} />
        </Routes>
      </main>
      <Footer />
    </div>
  )
}
```

---

## client/src/data/tools.js
```js
const tools = [
  { id: 'decompiler-pro', name: 'Decompiler Pro', price: 149, desc: 'Ethical binary & APK decompilation with reports.' },
  { id: 'process-monitor', name: 'Process Monitor+', price: 59, desc: 'Real-time process and network monitoring.' },
  { id: 'takedown-suite', name: 'Takedown Suite', price: 199, desc: 'Evidence pack & provider-ready takedown requests.' },
  { id: 'account-recovery', name: 'Account Recovery Kit', price: 79, desc: 'Guided recovery workflows & templates.' },
  { id: 'data-analyzer', name: 'Data Analyzer', price: 129, desc: 'CSV/JSON analytics & anomaly detection.' },
  { id: 'log-diff', name: 'LogDiff Pro', price: 39, desc: 'Diff, filter & timeline security logs.' },
  { id: 'hash-inspector', name: 'Hash Inspector', price: 25, desc: 'Multi-hash & file signature checker.' },
  { id: 'ip-reputation', name: 'IP Reputation Check', price: 29, desc: 'Quick threat intel lookups.' },
  { id: 'meta-extractor', name: 'Meta Extractor', price: 19, desc: 'EXIF/document metadata scrape.' },
  { id: 'packet-view', name: 'PacketView Lite', price: 49, desc: 'PCAP parsing & summaries.' },
  { id: 'site-monitor', name: 'Site Uptime Monitor', price: 39, desc: 'Checks, alerts, simple SLA logs.' },
  { id: 'vault-audit', name: 'Vault Audit', price: 89, desc: 'Permission audit for cloud drives.' },
  { id: 'mal-scan', name: 'MalScan Helper', price: 59, desc: 'YARA-based helper ruleset & triage.' },
  { id: 'pw-check', name: 'Password Hygiene Check', price: 15, desc: 'Breach exposure & strength tips.' },
  { id: 'domain-trace', name: 'Domain Trace', price: 29, desc: 'WHOIS, DNS, history snapshot.' },
  { id: 'api-tester', name: 'API Tester', price: 45, desc: 'REST/GraphQL testing UI.' },
  { id: 'pdf-toolkit', name: 'PDF Toolkit', price: 19, desc: 'Merge/split/sign helper.' },
  { id: 'img-cleaner', name: 'Image Cleaner', price: 29, desc: 'Redaction & blur.' },
  { id: 'timeline-maker', name: 'Timeline Maker', price: 35, desc: 'Build incident timelines.' },
  { id: 'osint-bundle', name: 'OSINT Bundle', price: 149, desc: 'Curated OSINT workflows.' },
  { id: 'otp-recover', name: 'OTP Recovery Aid', price: 35, desc: 'Best-practice guidance & templates.' }
]
export default tools
```

---

## client/src/components/NavBar.jsx
```jsx
import React from 'react'
import { Link, NavLink } from 'react-router-dom'
import logo from '../assets/logo.png'

export default function NavBar(){
  const link = 'px-3 py-2 rounded-xl hover:bg-white/10 transition';
  return (
    <header className="sticky top-0 z-50 backdrop-blur bg-brand-900/70 border-b border-white/10">
      <div className="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
        <Link to="/" className="flex items-center gap-2">
          <img src={logo} alt="HakitTools" className="h-8 w-8" />
          <span className="font-bold text-lg">HakitTools</span>
        </Link>
        <nav className="flex items-center gap-1 text-sm">
          <NavLink className={link} to="/">Home</NavLink>
          <NavLink className={link} to="/tools">Tools</NavLink>
          <NavLink className={link} to="/faq">FAQ</NavLink>
          <NavLink className={link} to="/contact">Contact</NavLink>
          <a className="ml-2 px-3 py-2 bg-white text-brand-900 rounded-xl font-semibold" href="https://t.me/hakittools" target="_blank">Request via Telegram</a>
        </nav>
      </div>
    </header>
  )
}
```

---

## client/src/components/Footer.jsx
```jsx
import React from 'react'

export default function Footer(){
  return (
    <footer className="border-t border-white/10 mt-12">
      <div className="max-w-6xl mx-auto px-4 py-8 text-sm text-white/70 flex flex-col md:flex-row gap-2 md:items-center md:justify-between">
        <p>© {new Date().getFullYear()} HakitTools. Secure, ethical, verified service delivery.</p>
        <p>We support lawful use only. See FAQ.</p>
      </div>
    </footer>
  )
}
```

---

## client/src/components/Hero.jsx
```jsx
import React, { useEffect } from 'react'
import { motion, useAnimation } from 'framer-motion'

export default function Hero(){
  const controls = useAnimation()
  useEffect(() => { controls.start({ opacity: 1, y: 0, transition: { duration: .8 } }) }, [])

  return (
    <section className="relative overflow-hidden">
      <div className="absolute inset-0 bg-gradient-to-br from-brand-800/40 to-brand-600/20" />
      <div className="max-w-6xl mx-auto px-4 py-20 relative">
        <motion.h1 initial={{ opacity: 0, y: 20 }} animate={controls}
          className="text-4xl md:text-6xl font-extrabold leading-tight">
          Ethical Tools. <span className="text-blue-300">Trusted Delivery.</span>
        </motion.h1>
        <motion.p initial={{ opacity: 0, y: 20 }} animate={controls}
          className="mt-4 text-white/80 max-w-2xl">
          HakitTools provides verified decompilation, monitoring, takedown support, recovery kits and data analysis—delivered securely after Telegram confirmation.
        </motion.p>
        <div className="mt-8 flex gap-3">
          <a href="https://t.me/hakittools" target="_blank" className="px-5 py-3 bg-white text-brand-900 rounded-xl font-semibold">Request via Telegram</a>
          <a href="#how" className="px-5 py-3 border border-white/30 rounded-xl">How it works</a>
        </div>
        <div className="mt-16 grid grid-cols-2 md:grid-cols-4 gap-3 opacity-90">
          {['Decompilation','Monitoring','Takedowns','Recovery','Data Analysis','OSINT','Forensics','Uptime'].map((t,i)=> (
            <div key={i} className="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">{t}</div>
          ))}
        </div>
      </div>
      <div className="absolute -bottom-24 -right-24 w-[400px] h-[400px] rounded-full bg-blue-500/10 blur-3xl" />
    </section>
  )
}
```

---

## client/src/components/HowItWorks.jsx
```jsx
import React from 'react'

export default function HowItWorks(){
  const steps = [
    { t: 'Browse & Select', d: 'Pick a tool and tap Request via Telegram.' },
    { t: 'Telegram Confirmation', d: 'We verify ethical/legal use and approve.' },
    { t: 'Secure Download', d: 'Receive a one-time token to unlock the file.' },
    { t: 'Support & Updates', d: 'We assist with setup and best practices.' }
  ]
  return (
    <section id="how" className="max-w-6xl mx-auto px-4 py-16">
      <h2 className="text-3xl font-bold">How the service works</h2>
      <p className="text-white/80 mt-2 max-w-2xl">All deliveries go through Telegram confirmation. Downloads are gated by token and optional password. We refuse unlawful requests.</p>
      <div className="mt-8 grid md:grid-cols-4 gap-4">
        {steps.map((s,i)=> (
          <div key={i} className="bg-white/5 border border-white/10 p-5 rounded-2xl">
            <div className="text-lg font-semibold">{s.t}</div>
            <div className="text-white/70 mt-1 text-sm">{s.d}</div>
          </div>
        ))}
      </div>
    </section>
  )
}
```

---

## client/src/components/ToolCard.jsx
```jsx
import React, { useState } from 'react'
import axios from 'axios'

const API = import.meta.env.VITE_API_URL || 'http://localhost:4000'

export default function ToolCard({ tool }){
  const [busy, setBusy] = useState(false)
  const [msg, setMsg] = useState('')

  async function request(){
    try{
      setBusy(true); setMsg('')
      const buyer = { name: 'Guest', email: '', telegram: '' }
      const { data } = await axios.post(`${API}/api/request`, { toolId: tool.id, buyer })
      setMsg(data.message || 'Requested. Check Telegram.')
    }catch(e){ setMsg(e.response?.data?.error || 'Request failed') }
    finally{ setBusy(false) }
  }

  return (
    <div className="bg-white/5 border border-white/10 rounded-2xl p-5 flex flex-col">
      <div className="font-semibold text-lg">{tool.name}</div>
      <div className="text-white/70 text-sm mt-1 flex-1">{tool.desc}</div>
      <div className="mt-3 flex items-center justify-between">
        <div className="font-bold">${tool.price}</div>
        <div className="flex gap-2">
          <a href="https://t.me/hakittools" target="_blank" className="px-3 py-2 bg-white text-brand-900 rounded-xl text-sm font-semibold">Telegram</a>
          <button onClick={request} disabled={busy} className="px-3 py-2 border border-white/30 rounded-xl text-sm">
            {busy ? 'Sending…' : 'Live Link Request'}
          </button>
        </div>
      </div>
      {msg && <div className="mt-2 text-xs text-blue-300">{msg}</div>}
    </div>
  )
}
```

---

## client/src/components/DownloadGate.jsx
```jsx
import React, { useEffect, useState } from 'react'
import axios from 'axios'
const API = import.meta.env.VITE_API_URL || 'http://localhost:4000'

export default function DownloadGate(){
  const [password, setPassword] = useState('')
  const [passOk, setPassOk] = useState(false)
  const [approveToken, setApproveToken] = useState('')
  const [jwt, setJwt] = useState('')
  const [toolId, setToolId] = useState('')
  const [url, setUrl] = useState('')
  const [err, setErr] = useState('')

  useEffect(()=>{
    const q = new URLSearchParams(window.location.search)
    const token = q.get('token')
    if (token) setApproveToken(token)
  },[])

  async function login(){
    try{
      setErr('')
      await axios.post(`${API}/api/login-downloads`, { password })
      setPassOk(true)
    }catch(e){ setErr(e.response?.data?.error || 'Login failed') }
  }

  async function confirm(){
    try{
      setErr('')
      const { data } = await axios.post(`${API}/api/confirm`, { token: approveToken })
      setJwt(data.jwt)
    }catch(e){ setErr(e.response?.data?.error || 'Token failed') }
  }

  async function getLink(){
    try{
      setErr('')
      const { data } = await axios.get(`${API}/api/download/${toolId}`, { headers: { Authorization: `Bearer ${jwt}` } })
      setUrl(data.url)
    }catch(e){ setErr(e.response?.data?.error || 'Download failed') }
  }

  return (
    <div className="bg-white/5 border border-white/10 p-5 rounded-2xl">
      <h3 className="font-semibold text-lg">Password‑protected downloads</h3>
      {!passOk ? (
        <div className="mt-3 flex flex-col gap-2">
          <input className="bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Enter download password" value={password} onChange={e=>setPassword(e.target.value)} />
          <button onClick={login} className="px-3 py-2 bg-white text-brand-900 rounded-xl">Unlock</button>
        </div>
      ) : (
        <div className="mt-4 space-y-3">
          <div className="text-sm text-white/70">After Telegram approval you receive a <b>token</b>. Paste it below to start a 30‑minute session for one tool.</div>
          <input className="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Approval token" value={approveToken} onChange={e=>setApproveToken(e.target.value)} />
          <button onClick={confirm} className="px-3 py-2 border border-white/30 rounded-xl">Confirm Token</button>

          {jwt && (
            <div className="mt-4">
              <input className="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Tool ID to download (e.g., decompiler-pro)" value={toolId} onChange={e=>setToolId(e.target.value)} />
              <button onClick={getLink} className="mt-2 px-3 py-2 bg-white text-brand-900 rounded-xl">Get Secure Link</button>
            </div>
          )}

          {url && <div className="mt-3 text-sm break-all">Secure URL: <a className="underline" href={url} target="_blank" rel="noreferrer">{url}</a></div>}
        </div>
      )}
      {err && <div className="mt-2 text-sm text-red-300">{err}</div>}
    </div>
  )
}
```

---

## client/src/components/FAQBlock.jsx
```jsx
import React from 'react'

export default function FAQBlock(){
  const faqs = [
    { q: 'What payments do you accept?', a: 'Telegram‑confirmed orders only. We currently accept secure methods listed in chat (card, PayPal or crypto) depending on your region.' },
    { q: 'How fast is delivery?', a: 'Most tools are delivered instantly after approval. Some require manual packaging or licensing. You will see a live token link when approved.' },
    { q: 'What support is included?', a: 'Setup guidance and best‑practice notes are included. Priority support available for business plans.' },
    { q: 'Are there limitations?', a: 'Yes. We only support lawful, ethical use. We refuse requests that could harm privacy, break terms, or violate law.' },
    { q: 'How do downloads work?', a: 'After Telegram approval, you receive a one‑time token. Enter it in the Download section to unlock a time‑limited link.' }
  ]
  return (
    <div className="grid md:grid-cols-2 gap-4">
      {faqs.map((f,i)=> (
        <div key={i} className="bg-white/5 border border-white/10 p-5 rounded-2xl">
          <div className="font-semibold">{f.q}</div>
          <div className="text-white/70 text-sm mt-1">{f.a}</div>
        </div>
      ))}
    </div>
  )
}
```

---

## client/src/components/ContactForm.jsx
```jsx
import React, { useState } from 'react'

export default function ContactForm(){
  const [name, setName] = useState('')
  const [email, setEmail] = useState('')
  const [telegram, setTelegram] = useState('')
  const [msg, setMsg] = useState('')
  const [sent, setSent] = useState(false)

  function submit(e){
    e.preventDefault();
    // Typically call your backend to notify Telegram admin
    setSent(true)
  }

  if (sent) return <div className="p-5 bg-white/5 border border-white/10 rounded-2xl">Thanks! We\'ll reach you on Telegram shortly.</div>

  return (
    <form onSubmit={submit} className="bg-white/5 border border-white/10 p-5 rounded-2xl space-y-3">
      <div className="grid md:grid-cols-2 gap-3">
        <input className="bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Name" value={name} onChange={e=>setName(e.target.value)} />
        <input className="bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Email (optional)" value={email} onChange={e=>setEmail(e.target.value)} />
      </div>
      <input className="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Telegram username (no @)" value={telegram} onChange={e=>setTelegram(e.target.value)} />
      <textarea className="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" rows="4" placeholder="What do you need?" value={msg} onChange={e=>setMsg(e.target.value)} />
      <button className="px-4 py-2 bg-white text-brand-900 rounded-xl font-semibold">Send</button>
      <a href="https://t.me/hakittools" target="_blank" className="ml-2 underline">Or message us on Telegram</a>
    </form>
  )
}
```

---

## client/src/pages/Home.jsx
```jsx
import React from 'react'
import Hero from '../components/Hero'
import HowItWorks from '../components/HowItWorks'
import ToolCard from '../components/ToolCard'
import tools from '../data/tools'
import DownloadGate from '../components/DownloadGate'

export default function Home(){
  return (
    <>
      <Hero />
      <section className="max-w-6xl mx-auto px-4 py-12">
        <h2 className="text-3xl font-bold">Popular tools</h2>
        <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-4 mt-6">
          {tools.slice(0,9).map(t=> (<ToolCard key={t.id} tool={t} />))}
        </div>
      </section>
      <HowItWorks />
      <section className="max-w-6xl mx-auto px-4 pb-16">
        <h2 className="text-2xl font-bold mb-3">Downloads</h2>
        <DownloadGate />
      </section>
    </>
  )
}
```

---

## client/src/pages/Tools.jsx
```jsx
import React from 'react'
import ToolCard from '../components/ToolCard'
import tools from '../data/tools'

export default function Tools(){
  return (
    <section className="max-w-6xl mx-auto px-4 py-12">
      <h1 className="text-3xl font-bold">All Tools</h1>
      <p className="text-white/80 mt-2">Browse 20+ tools. Each order is approved via Telegram to ensure ethical use.</p>
      <div className="grid sm:grid-cols-2 md:grid-cols-3 gap-4 mt-6">
        {tools.map(t=> (<ToolCard key={t.id} tool={t} />))}
      </div>
    </section>
  )
}
```

---

## client/src/pages/FAQ.jsx
```jsx
import React from 'react'
import FAQBlock from '../components/FAQBlock'

export default function FAQ(){
  return (
    <section className="max-w-6xl mx-auto px-4 py-12">
      <h1 className="text-3xl font-bold">FAQ</h1>
      <p className="text-white/80 mt-2">Payments, delivery, support and limitations.</p>
      <div className="mt-6"><FAQBlock /></div>
      <div className="mt-10 text-sm text-white/60">
        <p><b>Compliance:</b> HakitTools supports lawful, consent‑based security work only. We verify purpose and may require documentation for takedown requests.</p>
      </div>
    </section>
  )
}
```

---

## client/src/pages/Contact.jsx
```jsx
import React from 'react'
import ContactForm from '../components/ContactForm'

export default function Contact(){
  return (
    <section className="max-w-6xl mx-auto px-4 py-12">
      <h1 className="text-3xl font-bold">Contact</h1>
      <p className="text-white/80 mt-2">Reach us on Telegram for the fastest response.</p>
      <div className="mt-6 max-w-2xl"><ContactForm /></div>
      <div className="mt-6 text-sm text-white/60">Telegram: <a href="https://t.me/hakittools" className="underline" target="_blank">t.me/hakittools</a></div>
    </section>
  )
}
```

---

## Branding Notes
- Replace `client/src/assets/logo.png` with the logo you provide.
- Colors: Deep tech blue palette is baked in via `brand` colors. Tweak in Tailwind config.

## Deployment Notes
- Set `VITE_API_URL` in `client` `.env` to point to the hosted API.
- Replace dummy download URL issuance with a pre‑signed link from S3/Cloudflare R2/GCS.
- Swap `server/store.js` with Redis or a DB for persistent tokens.
- In Telegram, create a bot with BotFather to obtain `TELEGRAM_BOT_TOKEN`, then set `TELEGRAM_ADMIN_CHAT_ID` to your user/chat id.

## Security Notes
- All downloads require both: (1) password gate and (2) Telegram token.
- JWT lifetime is 30 minutes by default.
- Consider rate limiting and logging on the API.

```bash
# Example .env for client (client/.env)
VITE_API_URL=http://localhost:4000


---

# STATIC EXPRESS VERSION (Normal Website)

> This variant serves four HTML pages with Express and uses Tailwind via CDN (no build tools). Drop these files in the indicated paths.

## Project Structure
```
hakittools/
├─ server.js
├─ .env.example
├─ package.json
└─ public/
   ├─ index.html
   ├─ tools.html
   ├─ faq.html
   ├─ contact.html
   ├─ style.css
   ├─ js/
   │  └─ main.js
   └─ assets/
      └─ logo.png  (replace with your logo)
```

## package.json
```json
{
  "name": "hakittools-site",
  "version": "1.0.0",
  "type": "module",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "axios": "^1.7.2",
    "cors": "^2.8.5",
    "dotenv": "^16.4.5",
    "express": "^4.19.2",
    "express-session": "^1.17.3",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "morgan": "^1.10.0"
  }
}
```

## .env.example
```
PORT=4000
DOWNLOAD_PASSWORD=ChangeThisPassword
JWT_SECRET=change_me
TOKEN_TTL_MINUTES=30
CLIENT_ORIGIN=http://localhost:4000
TELEGRAM_BOT_TOKEN=123456:your-token
TELEGRAM_ADMIN_CHAT_ID=123456789
```

## server.js
```js
import express from 'express'
import path from 'path'
import helmet from 'helmet'
import morgan from 'morgan'
import session from 'express-session'
import dotenv from 'dotenv'
import crypto from 'crypto'
import jwt from 'jsonwebtoken'
import axios from 'axios'

dotenv.config()
const app = express()
const __dirname = path.resolve()

app.use(express.json())
app.use(helmet())
app.use(morgan('dev'))
app.use(session({ secret: 'hakittools-session', resave: false, saveUninitialized: true }))
app.use(express.static(path.join(__dirname, 'public')))

// ===== Tools catalogue (20+)
const tools = [
  { id: 'decompiler-pro', name: 'Decompiler Pro', price: 149, desc: 'Ethical binary & APK decompilation with reports.' },
  { id: 'process-monitor', name: 'Process Monitor+', price: 59, desc: 'Real-time process and network monitoring.' },
  { id: 'takedown-suite', name: 'Takedown Suite', price: 199, desc: 'Evidence pack & provider-ready takedown requests.' },
  { id: 'account-recovery', name: 'Account Recovery Kit', price: 79, desc: 'Guided recovery workflows & templates.' },
  { id: 'data-analyzer', name: 'Data Analyzer', price: 129, desc: 'CSV/JSON analytics & anomaly detection.' },
  { id: 'log-diff', name: 'LogDiff Pro', price: 39, desc: 'Diff, filter & timeline security logs.' },
  { id: 'hash-inspector', name: 'Hash Inspector', price: 25, desc: 'Multi-hash & file signature checker.' },
  { id: 'ip-reputation', name: 'IP Reputation Check', price: 29, desc: 'Quick threat intel lookups.' },
  { id: 'meta-extractor', name: 'Meta Extractor', price: 19, desc: 'EXIF/document metadata scrape.' },
  { id: 'packet-view', name: 'PacketView Lite', price: 49, desc: 'PCAP parsing & summaries.' },
  { id: 'site-monitor', name: 'Site Uptime Monitor', price: 39, desc: 'Checks, alerts, simple SLA logs.' },
  { id: 'vault-audit', name: 'Vault Audit', price: 89, desc: 'Permission audit for cloud drives.' },
  { id: 'mal-scan', name: 'MalScan Helper', price: 59, desc: 'YARA-based helper ruleset & triage.' },
  { id: 'pw-check', name: 'Password Hygiene Check', price: 15, desc: 'Breach exposure & strength tips.' },
  { id: 'domain-trace', name: 'Domain Trace', price: 29, desc: 'WHOIS, DNS, history snapshot.' },
  { id: 'api-tester', name: 'API Tester', price: 45, desc: 'REST/GraphQL testing UI.' },
  { id: 'pdf-toolkit', name: 'PDF Toolkit', price: 19, desc: 'Merge, split, sign helper.' },
  { id: 'img-cleaner', name: 'Image Cleaner', price: 29, desc: 'Simple redaction & blur.' },
  { id: 'timeline-maker', name: 'Timeline Maker', price: 35, desc: 'Build incident timelines.' },
  { id: 'osint-bundle', name: 'OSINT Bundle', price: 149, desc: 'Curated OSINT workflows.' },
  { id: 'otp-recover', name: 'OTP Recovery Aid', price: 35, desc: 'Best-practice guidance & templates.' }
]

// Public API
app.get('/api/tools', (req, res) => res.json({ tools }))

// Request via site -> notifies admin on Telegram (optional). Always safe/legal use only.
app.post('/api/request', async (req, res) => {
  try {
    const { toolId, buyer } = req.body
    const tool = tools.find(t => t.id === toolId)
    if (!tool) return res.status(404).json({ error: 'Tool not found' })

    const approveToken = crypto.randomBytes(16).toString('hex')
    const ttl = Number(process.env.TOKEN_TTL_MINUTES || 30)
    const expiresAt = Date.now() + ttl * 60 * 1000

    req.session.pending = { approveToken, toolId, expiresAt }

    // Telegram notify (if configured)
    if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_ADMIN_CHAT_ID) {
      const api = `https://api.telegram.org/bot${process.env.TELEGRAM_BOT_TOKEN}/sendMessage`
      const text = [
        '<b>New download request</b>',
        `Tool: ${tool.name} ($${tool.price})`,
        `Buyer: ${buyer?.name || 'N/A'} | ${buyer?.email || 'N/A'} | @${buyer?.telegram || 'N/A'}`,
        `Approve token: ${approveToken}`
      ].join('
')
      await axios.post(api, { chat_id: process.env.TELEGRAM_ADMIN_CHAT_ID, text, parse_mode: 'HTML' })
    }

    res.json({ ok: true, message: 'Request received. Approval will be confirmed on Telegram.', tokenHint: approveToken.slice(0,4) + '…' })
  } catch (e) {
    console.error(e); res.status(500).json({ error: 'Request failed' })
  }
})

// Password gate (step 1)
app.post('/api/login-downloads', (req, res) => {
  let body = ''
  req.on('data', chunk => body += chunk)
  req.on('end', () => {
    try {
      const { password } = JSON.parse(body || '{}')
      if (password === process.env.DOWNLOAD_PASSWORD) { req.session.passOk = true; return res.json({ ok: true }) }
      return res.status(401).json({ error: 'Unauthorized' })
    } catch { return res.status(400).json({ error: 'Bad request' }) }
  })
})

// Token confirm (step 2)
app.post('/api/confirm', (req, res) => {
  let body = ''
  req.on('data', chunk => body += chunk)
  req.on('end', () => {
    try {
      const { token } = JSON.parse(body || '{}')
      const pending = req.session.pending
      if (!pending) return res.status(400).json({ error: 'No pending request' })
      if (Date.now() > pending.expiresAt) return res.status(400).json({ error: 'Token expired' })
      if (token !== pending.approveToken) return res.status(400).json({ error: 'Invalid token' })

      const jwtToken = jwt.sign({ toolId: pending.toolId }, process.env.JWT_SECRET, { expiresIn: '30m' })
      req.session.jwt = jwtToken
      return res.json({ ok: true, jwt: jwtToken })
    } catch { return res.status(400).json({ error: 'Bad request' }) }
  })
})

// Final link (step 3)
app.get('/api/download/:toolId', (req, res) => {
  if (!req.session.passOk || !req.session.jwt) return res.status(401).json({ error: 'Not authorized' })
  try {
    const payload = jwt.verify(req.session.jwt, process.env.JWT_SECRET)
    if (payload.toolId !== req.params.toolId) return res.status(403).json({ error: 'Wrong tool for token' })
    // Replace with real storage URL
    return res.json({ ok: true, url: `https://your-storage.example/downloads/${payload.toolId}.zip` })
  } catch (e) { return res.status(401).json({ error: 'Session expired' }) }
})

app.listen(process.env.PORT || 4000, () => console.log(`HakitTools running on :${process.env.PORT || 4000}`))
```

## public/style.css
```css
/* Optional extras beyond Tailwind */
.bg-grid {
  background-image: radial-gradient(rgba(255,255,255,0.05) 1px, transparent 1px);
  background-size: 20px 20px;
}
```

## public/js/main.js
```js
const API = '' // same origin

async function fetchTools() {
  const res = await fetch('/api/tools')
  const { tools } = await res.json()
  return tools
}

function toolCard(t){
  return `
    <div class="bg-white/5 border border-white/10 rounded-2xl p-5 flex flex-col">
      <div class="font-semibold text-lg">${t.name}</div>
      <div class="text-white/70 text-sm mt-1 flex-1">${t.desc}</div>
      <div class="mt-3 flex items-center justify-between">
        <div class="font-bold">$${t.price}</div>
        <div class="flex gap-2">
          <a href="https://t.me/hakittools" target="_blank" class="px-3 py-2 bg-white text-blue-900 rounded-xl text-sm font-semibold">Telegram</a>
          <button data-tool="${t.id}" class="req px-3 py-2 border border-white/30 rounded-xl text-sm">Live Link Request</button>
        </div>
      </div>
    </div>`
}

async function mountTools(containerId){
  const el = document.getElementById(containerId)
  if (!el) return
  const tools = await fetchTools()
  el.innerHTML = tools.map(toolCard).join('')
  ;[...el.querySelectorAll('.req')].forEach(btn => btn.addEventListener('click', async (e)=>{
    const toolId = e.currentTarget.getAttribute('data-tool')
    const buyer = { name: 'Guest', email: '', telegram: '' }
    e.currentTarget.disabled = true
    try{
      const res = await fetch('/api/request', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ toolId, buyer }) })
      const data = await res.json()
      alert(data.message || 'Requested. Check Telegram.')
    }catch(err){ alert('Request failed') }
    e.currentTarget.disabled = false
  }))
}

// Download gate logic
async function loginDownloads(){
  const pw = document.getElementById('dl-pass').value
  const res = await fetch('/api/login-downloads', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({ password: pw }) })
  const data = await res.json()
  const gate = document.getElementById('dl-gate')
  const step2 = document.getElementById('dl-step2')
  if (data.ok){ gate.classList.add('hidden'); step2.classList.remove('hidden') } else { alert(data.error || 'Login failed') }
}

async function confirmToken(){
  const token = document.getElementById('dl-token').value
  const res = await fetch('/api/confirm', { method: 'POST', headers: {'Content-Type':'application/json'}, body: JSON.stringify({ token }) })
  const data = await res.json()
  const step3 = document.getElementById('dl-step3')
  if (data.ok){ step3.classList.remove('hidden'); alert('Token confirmed. You have 30 minutes to download.') } else { alert(data.error || 'Token failed') }
}

async function getLink(){
  const toolId = document.getElementById('dl-toolid').value
  const res = await fetch(`/api/download/${toolId}`)
  const data = await res.json()
  if (data.ok){
    const a = document.getElementById('dl-url')
    a.href = data.url; a.textContent = data.url; a.classList.remove('hidden')
  } else { alert(data.error || 'Download failed') }
}

window.Hakit = { mountTools, loginDownloads, confirmToken, getLink }
```

## public/index.html (Home)
```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HakitTools – Secure Ethical Tools</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>tailwind.config = { theme: { extend: { colors: { brand: { 900:'#0b1736',800:'#0f214f',700:'#13306e',600:'#1a3f8b' } } } } }</script>
  <link rel="stylesheet" href="/style.css">
</head>
<body class="bg-brand-900 text-white">
  <header class="sticky top-0 backdrop-blur bg-brand-900/70 border-b border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <a href="/" class="flex items-center gap-2">
        <img src="/assets/logo.png" alt="HakitTools" class="h-8 w-8">
        <span class="font-bold text-lg">HakitTools</span>
      </a>
      <nav class="text-sm">
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/">Home</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/tools.html">Tools</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/faq.html">FAQ</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/contact.html">Contact</a>
        <a class="ml-2 px-3 py-2 bg-white text-brand-900 rounded-xl font-semibold" target="_blank" href="https://t.me/hakittools">Request via Telegram</a>
      </nav>
    </div>
  </header>

  <section class="relative overflow-hidden bg-grid">
    <div class="absolute inset-0 bg-gradient-to-br from-brand-800/40 to-brand-600/20"></div>
    <div class="max-w-6xl mx-auto px-4 py-20 relative">
      <h1 class="text-4xl md:text-6xl font-extrabold leading-tight">Ethical Tools. <span class="text-blue-300">Trusted Delivery.</span></h1>
      <p class="mt-4 text-white/80 max-w-2xl">Verified decompilation, monitoring, takedown support, recovery kits and data analysis—delivered securely after Telegram confirmation.</p>
      <div class="mt-8 flex gap-3">
        <a href="https://t.me/hakittools" target="_blank" class="px-5 py-3 bg-white text-brand-900 rounded-xl font-semibold">Request via Telegram</a>
        <a href="#how" class="px-5 py-3 border border-white/30 rounded-xl">How it works</a>
      </div>
      <div class="mt-16 grid grid-cols-2 md:grid-cols-4 gap-3 opacity-90">
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Decompilation</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Monitoring</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Takedowns</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Recovery</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Data Analysis</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">OSINT</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Forensics</div>
        <div class="rounded-2xl bg-white/5 border border-white/10 p-4 text-center text-sm">Uptime</div>
      </div>
    </div>
  </section>

  <section class="max-w-6xl mx-auto px-4 py-12">
    <h2 class="text-3xl font-bold">Popular tools</h2>
    <div id="tools-home" class="grid sm:grid-cols-2 md:grid-cols-3 gap-4 mt-6"></div>
  </section>

  <section id="how" class="max-w-6xl mx-auto px-4 py-16">
    <h2 class="text-3xl font-bold">How the service works</h2>
    <p class="text-white/80 mt-2 max-w-2xl">All deliveries go through Telegram confirmation. Downloads are gated by password and a one-time token. We refuse unlawful requests.</p>
    <div class="mt-8 grid md:grid-cols-4 gap-4">
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">Browse & Select</div><div class="text-white/70 mt-1 text-sm">Pick a tool and tap Request via Telegram.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">Telegram Confirmation</div><div class="text-white/70 mt-1 text-sm">We verify ethical/legal use and approve.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">Secure Download</div><div class="text-white/70 mt-1 text-sm">Receive a one-time token to unlock the file.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">Support & Updates</div><div class="text-white/70 mt-1 text-sm">We assist with setup and best practices.</div></div>
    </div>
  </section>

  <section class="max-w-6xl mx-auto px-4 pb-16">
    <h2 class="text-2xl font-bold mb-3">Downloads</h2>
    <div class="bg-white/5 border border-white/10 p-5 rounded-2xl">
      <h3 class="font-semibold text-lg">Password‑protected downloads</h3>
      <div id="dl-gate" class="mt-3 flex flex-col gap-2">
        <input id="dl-pass" class="bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Enter download password">
        <button onclick="Hakit.loginDownloads()" class="px-3 py-2 bg-white text-brand-900 rounded-xl">Unlock</button>
      </div>
      <div id="dl-step2" class="hidden mt-4 space-y-3">
        <div class="text-sm text-white/70">After Telegram approval you receive a token. Paste it below.</div>
        <input id="dl-token" class="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Approval token">
        <button onclick="Hakit.confirmToken()" class="px-3 py-2 border border-white/30 rounded-xl">Confirm Token</button>
      </div>
      <div id="dl-step3" class="hidden mt-4">
        <input id="dl-toolid" class="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Tool ID (e.g., decompiler-pro)">
        <button onclick="Hakit.getLink()" class="mt-2 px-3 py-2 bg-white text-brand-900 rounded-xl">Get Secure Link</button>
        <div class="mt-3 text-sm">Secure URL: <a id="dl-url" class="underline hidden" target="_blank"></a></div>
      </div>
    </div>
  </section>

  <footer class="border-t border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-8 text-sm text-white/70 flex flex-col md:flex-row gap-2 md:items-center md:justify-between">
      <p>© <span id="yr"></span> HakitTools. Secure, ethical, verified service delivery.</p>
      <p>We support lawful use only. See FAQ.</p>
    </div>
  </footer>

  <script src="/js/main.js"></script>
  <script>document.getElementById('yr').textContent = new Date().getFullYear(); Hakit.mountTools('tools-home')</script>
</body>
</html>
```

## public/tools.html (Tools)
```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HakitTools – Tools</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>tailwind.config = { theme: { extend: { colors: { brand: { 900:'#0b1736',800:'#0f214f',700:'#13306e',600:'#1a3f8b' } } } } }</script>
</head>
<body class="bg-brand-900 text-white">
  <header class="sticky top-0 backdrop-blur bg-brand-900/70 border-b border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <a href="/" class="flex items-center gap-2">
        <img src="/assets/logo.png" alt="HakitTools" class="h-8 w-8"><span class="font-bold text-lg">HakitTools</span>
      </a>
      <nav class="text-sm">
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/">Home</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/tools.html">Tools</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/faq.html">FAQ</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/contact.html">Contact</a>
        <a class="ml-2 px-3 py-2 bg-white text-brand-900 rounded-xl font-semibold" target="_blank" href="https://t.me/hakittools">Request via Telegram</a>
      </nav>
    </div>
  </header>

  <section class="max-w-6xl mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold">All Tools</h1>
    <p class="text-white/80 mt-2">Browse 20+ tools. Each order is approved via Telegram to ensure ethical use.</p>
    <div id="tools-list" class="grid sm:grid-cols-2 md:grid-cols-3 gap-4 mt-6"></div>
  </section>

  <footer class="border-t border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-8 text-sm text-white/70">© <span id="yr"></span> HakitTools</div>
  </footer>

  <script src="/js/main.js"></script>
  <script>document.getElementById('yr').textContent = new Date().getFullYear(); Hakit.mountTools('tools-list')</script>
</body>
</html>
```

## public/faq.html (FAQ)
```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HakitTools – FAQ</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>tailwind.config = { theme: { extend: { colors: { brand: { 900:'#0b1736',800:'#0f214f',700:'#13306e',600:'#1a3f8b' } } } } }</script>
</head>
<body class="bg-brand-900 text-white">
  <header class="sticky top-0 backdrop-blur bg-brand-900/70 border-b border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <a href="/" class="flex items-center gap-2">
        <img src="/assets/logo.png" alt="HakitTools" class="h-8 w-8"><span class="font-bold text-lg">HakitTools</span>
      </a>
      <nav class="text-sm">
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/">Home</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/tools.html">Tools</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/faq.html">FAQ</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/contact.html">Contact</a>
        <a class="ml-2 px-3 py-2 bg-white text-brand-900 rounded-xl font-semibold" target="_blank" href="https://t.me/hakittools">Request via Telegram</a>
      </nav>
    </div>
  </header>

  <section class="max-w-6xl mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold">FAQ</h1>
    <p class="text-white/80 mt-2">Payments, delivery, support and limitations.</p>
    <div class="grid md:grid-cols-2 gap-4 mt-6">
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">What payments do you accept?</div><div class="text-white/70 text-sm mt-1">Telegram‑confirmed orders only. We accept secure methods listed in chat (card, PayPal or crypto) depending on region.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">How fast is delivery?</div><div class="text-white/70 text-sm mt-1">Most tools are delivered instantly after approval. Some require manual packaging/licensing.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">What support is included?</div><div class="text-white/70 text-sm mt-1">Setup guidance and best‑practice notes are included. Priority support available for business plans.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">Are there limitations?</div><div class="text-white/70 text-sm mt-1">Yes. We only support lawful, ethical use. Requests that could harm privacy, break terms, or violate law are refused.</div></div>
      <div class="bg-white/5 border border-white/10 p-5 rounded-2xl"><div class="font-semibold">How do downloads work?</div><div class="text-white/70 text-sm mt-1">After Telegram approval, you receive a one‑time token. Enter it in the Downloads section to unlock a time‑limited link.</div></div>
    </div>
  </section>

  <footer class="border-t border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-8 text-sm text-white/70">© <span id="yr"></span> HakitTools</div>
  </footer>

  <script>document.getElementById('yr').textContent = new Date().getFullYear()</script>
</body>
</html>
```

## public/contact.html (Contact)
```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="UTF-8"><meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>HakitTools – Contact</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script>tailwind.config = { theme: { extend: { colors: { brand: { 900:'#0b1736',800:'#0f214f',700:'#13306e',600:'#1a3f8b' } } } } }</script>
</head>
<body class="bg-brand-900 text-white">
  <header class="sticky top-0 backdrop-blur bg-brand-900/70 border-b border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-3 flex items-center justify-between">
      <a href="/" class="flex items-center gap-2">
        <img src="/assets/logo.png" alt="HakitTools" class="h-8 w-8"><span class="font-bold text-lg">HakitTools</span>
      </a>
      <nav class="text-sm">
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/">Home</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/tools.html">Tools</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/faq.html">FAQ</a>
        <a class="px-3 py-2 rounded-xl hover:bg-white/10" href="/contact.html">Contact</a>
        <a class="ml-2 px-3 py-2 bg-white text-brand-900 rounded-xl font-semibold" target="_blank" href="https://t.me/hakittools">Request via Telegram</a>
      </nav>
    </div>
  </header>

  <section class="max-w-6xl mx-auto px-4 py-12">
    <h1 class="text-3xl font-bold">Contact</h1>
    <p class="text-white/80 mt-2">Reach us on Telegram for the fastest response.</p>
    <form class="bg-white/5 border border-white/10 p-5 rounded-2xl space-y-3 max-w-2xl">
      <div class="grid md:grid-cols-2 gap-3">
        <input class="bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Name">
        <input class="bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Email (optional)">
      </div>
      <input class="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" placeholder="Telegram username (no @)">
      <textarea class="w-full bg-transparent border border-white/20 rounded-xl px-3 py-2" rows="4" placeholder="What do you need?"></textarea>
      <button class="px-4 py-2 bg-white text-brand-900 rounded-xl font-semibold" type="button" onclick="window.open('https://t.me/hakittools','_blank')">Contact on Telegram</button>
    </form>
    <div class="mt-6 text-sm text-white/60">Telegram: <a href="https://t.me/hakittools" class="underline" target="_blank">t.me/hakittools</a></div>
  </section>

  <footer class="border-t border-white/10">
    <div class="max-w-6xl mx-auto px-4 py-8 text-sm text-white/70">© <span id="yr"></span> HakitTools</div>
  </footer>

  <script>document.getElementById('yr').textContent = new Date().getFullYear()</script>
</body>
</html>
```
